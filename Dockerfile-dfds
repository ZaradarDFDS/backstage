#Setup build image
FROM node:lts-buster AS build-env

#Set container filesystem to /build (and create folder if it doesnt exist)
WORKDIR /build

#Copy files to container file system.
COPY ./ ./src

#Set workdir to current project folder
WORKDIR /build/src

#Run yarn install
RUN yarn install

#Expose http
EXPOSE 3000/tcp

#Start dev server
# ENTRYPOINT ["yarn", "start"]



# #Restore csproj packages.
# RUN dotnet restore

# #Compile source code using standard Release profile
# RUN dotnet publish -c Release -o /build/out

# #Setup final container images.
# FROM mcr.microsoft.com/dotnet/core/aspnet:3.1 AS runtime
# WORKDIR /app

# # SSL
# RUN curl -o /tmp/rds-combined-ca-bundle.pem https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem \
#     && mv /tmp/rds-combined-ca-bundle.pem /usr/local/share/ca-certificates/rds-combined-ca-bundle.crt \
#     && update-ca-certificates

# ENV CAPABILITY_SERVICE_KAFKA_SSL_CA_LOCATION=/app/cert.pem

# RUN curl -sS -o /app/cert.pem https://curl.haxx.se/ca/cacert.pem

# # Datadog APM
# ENV TRACER_VERSION=1.13.0
# RUN curl -LO https://github.com/DataDog/dd-trace-dotnet/releases/download/v${TRACER_VERSION}/datadog-dotnet-apm_${TRACER_VERSION}_amd64.deb \
#     && dpkg -i ./datadog-dotnet-apm_${TRACER_VERSION}_amd64.deb

# ENV CORECLR_ENABLE_PROFILING=1
# ENV CORECLR_PROFILER={846F5F1C-F9AE-4B07-969E-05C26BC060D8}
# ENV CORECLR_PROFILER_PATH=/opt/datadog/Datadog.Trace.ClrProfiler.Native.so
# ENV DD_INTEGRATIONS=/opt/datadog/integrations.json
# ENV DD_DOTNET_TRACER_HOME=/opt/datadog

# #Copy binaries from publish container to final container
# COPY --from=build-env /build/out .

# #Run dotnet executable
# ENTRYPOINT ["dotnet", "CapabilityService.WebApi.dll"]



# FROM 


# FROM nginx:mainline

# This dockerfile requires the app to be built on the host first, as it
# simply copies in the build output into the image.

# The safest way to build this image is to use `yarn docker-build`

# RUN apt-get update && apt-get -y install jq && rm -rf /var/lib/apt/lists/*

# COPY packages/app/dist /usr/share/nginx/html
# COPY docker/default.conf.template /etc/nginx/conf.d/default.conf.template
# COPY docker/run.sh /usr/local/bin/run.sh
# CMD run.sh

# ENV PORT 80
